-- Criação do banco de dados (opcional)
-- DROP DATABASE bypass_registry;
CREATE DATABASE IF NOT EXISTS bypass_registry;
USE bypass_registry;

-- Tabela LINHA
-- DROP TABLE LINHA;
CREATE TABLE IF NOT EXISTS LINHA (
    ID_LINHA INT AUTO_INCREMENT PRIMARY KEY,
    NUMERO INT NOT NULL,
    COR_IDENTIFICACAO VARCHAR(30),
    ESTACAO_ORIGEM VARCHAR(100),
    ESTACAO_DESTINO VARCHAR(100),
    EXTENSAO_KM DECIMAL(10,2)
);

-- Tabela ESTACAO
CREATE TABLE IF NOT EXISTS ESTACAO (
    ID_ESTACAO INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    STATUS_OPERACIONAL ENUM('ATIVA', 'INATIVA', 'MANUTENCAO') DEFAULT 'ATIVA'
    -- HORARIO_FUNCIONAMENTO VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS PLATAFORMA (
	ID_PLATAFORMA INT AUTO_INCREMENT PRIMARY KEY,
    NUMERO_PLATAFORMA INT NOT NULL,
    ID_ESTACAO INT NOT NULL,
    FOREIGN KEY (ID_ESTACAO) REFERENCES ESTACAO (ID_ESTACAO)
);

CREATE TABLE IF NOT EXISTS LINHA_ESTACAO (
    ID_LINHA_ESTACAO INT PRIMARY KEY AUTO_INCREMENT,
    ID_LINHA INT NOT NULL,
    ID_ESTACAO INT NOT NULL,
    FOREIGN KEY (ID_LINHA) REFERENCES LINHA (ID_LINHA),
    FOREIGN KEY (ID_ESTACAO) REFERENCES ESTACAO (ID_ESTACAO)
);

-- Tabela TREM
CREATE TABLE IF NOT EXISTS TREM (
    ID_TREM INT AUTO_INCREMENT PRIMARY KEY,
    NUM_IDENTIFICACAO VARCHAR(50) NOT NULL UNIQUE,
    MODELO VARCHAR(100),
    DATA_FABRICACAO DATE,
    CAPACIDADE_PASSAGEIROS INT,
    STATUS_OPERACIONAL ENUM('ATIVO', 'MANUTENCAO', 'DESATIVADO') DEFAULT 'ATIVO',
    ID_LINHA INT,
    FOREIGN KEY (ID_LINHA) REFERENCES LINHA(ID_LINHA)
);

-- Tabela CARRO
CREATE TABLE IF NOT EXISTS CARRO (
    ID_CARRO INT AUTO_INCREMENT PRIMARY KEY,
    NUM_IDENTIFICACAO VARCHAR(50) NOT NULL UNIQUE,
    MODELO VARCHAR(100) NOT NULL,
    CAPACIDADE INT,
    STATUS_OPERACIONAL ENUM('ATIVO', 'MANUTENCAO', 'DESATIVADO') DEFAULT 'ATIVO',
    DATA_FABRICACAO DATE
);

-- Tabela de composição dos trens (relacionamento N:M entre TREM e CARRO)
CREATE TABLE IF NOT EXISTS COMPOSICAO_TRENS (
    ID_COMPOSICAO INT AUTO_INCREMENT PRIMARY KEY,
    ID_TREM INT NOT NULL,
    ID_CARRO INT NOT NULL,
    DATA_HORA_INICIO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    DATA_HORA_FIM DATETIME NULL,
    -- POSICAO_NO_TREM INT NULL,
    FOREIGN KEY (ID_TREM) REFERENCES TREM(ID_TREM),
    FOREIGN KEY (ID_CARRO) REFERENCES CARRO(ID_CARRO),
    CONSTRAINT chk_tempo_valido CHECK (DATA_HORA_FIM IS NULL OR DATA_HORA_FIM > DATA_HORA_INICIO)
);

CREATE TABLE IF NOT EXISTS TRILHO (
	ID_TRILHO INT AUTO_INCREMENT PRIMARY KEY,
    ID_LINHA INT NOT NULL,
    NUM_IDENTIFICACAO VARCHAR(50) NOT NULL,
    ID_ESTACAO_ORIGEM INT NOT NULL,
    ID_ESTACAO_DESTINO INT NOT NULL,
    POSICAO_M INT NOT NULL, -- POSICAO REFERENTE A QUANTOS METROS FALTAM PARA A PROX ESTACAO
    FOREIGN KEY(ID_LINHA) REFERENCES LINHA(ID_LINHA)
);

CREATE TABLE IF NOT EXISTS CIRCUITO (
	ID_CIRCUITO INT AUTO_INCREMENT PRIMARY KEY,
    MODELO VARCHAR(100) NOT NULL,
    CATEGORIA VARCHAR(100) NOT NULL,
    PRIORIDADE INT NOT NULL,
    ID_CARRO INT,
    FOREIGN KEY (ID_CARRO) REFERENCES CARRO(ID_CARRO)
);

CREATE TABLE IF NOT EXISTS PASTILHA (
	ID_PASTILHA INT AUTO_INCREMENT PRIMARY KEY,
    ID_TREM INT,
    MODELO VARCHAR(50),
    -- ?
    FOREIGN KEY (ID_TREM) REFERENCES TREM(ID_TREM)
);

-- Tabela SENSOR
CREATE TABLE IF NOT EXISTS SENSOR (
    ID_SENSOR INT AUTO_INCREMENT PRIMARY KEY,
    ID_TREM INT,
    ID_CARRO INT,
    ID_CIRCUITO INT,
    ID_PLATAFORMA INT,
    ID_PASTILHA INT,
    ID_TRILHO INT,
    TIPO_SENSOR ENUM('TEMPERATURA/UMIDADE', 'TOF', 'INFRAVERMELHO', 'OPTICO', 'DPS', 'PIEZO') NOT NULL,
    FABRICANTE VARCHAR(100),
    MODELO_SENSOR VARCHAR(100),
    FOREIGN KEY (ID_TREM) REFERENCES TREM(ID_TREM),
    FOREIGN KEY (ID_CARRO) REFERENCES CARRO(ID_CARRO),
    FOREIGN KEY (ID_CIRCUITO) REFERENCES CIRCUITO(ID_CIRCUITO),
    FOREIGN KEY (ID_PLATAFORMA) REFERENCES PLATAFORMA(ID_PLATAFORMA),
    FOREIGN KEY (ID_PASTILHA) REFERENCES PASTILHA(ID_PASTILHA),
    FOREIGN KEY (ID_TRILHO) REFERENCES TRILHO(ID_TRILHO)
);

-- DADOS_TEMPERATURA
-- DROP TABLE DADOS_TEMPERATURA;
CREATE TABLE IF NOT EXISTS DADOS_DHT11 (
    ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
    ID_SENSOR INT NOT NULL,
    DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    TEMPERATURA DECIMAL(5,2) NOT NULL,
    UMIDADE DECIMAL(5,2),
    -- STATUS_ALERTA ENUM('NORMAL', 'ATENCAO', 'CRITICO') DEFAULT 'NORMAL',
    FOREIGN KEY (ID_SENSOR) REFERENCES SENSOR(ID_SENSOR)
);

-- DROP TABLE DADOS_TOF;
-- DADOS_TOF (Time-of-Flight)
CREATE TABLE IF NOT EXISTS DADOS_TOF (
    ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
    ID_SENSOR INT NOT NULL,
    DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    OCUPACAO_MEDIA DECIMAL(5,2) NOT NULL,
    FOREIGN KEY (ID_SENSOR) REFERENCES SENSOR(ID_SENSOR)
);

-- DADOS_INFRAVERMELHO
-- CREATE TABLE IF NOT EXISTS DADOS_INFRAVERMELHO (
--     ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
--     ID_SENSOR INT NOT NULL,
--     DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,    
--     FOREIGN KEY (ID_SENSOR) REFERENCES SENSOR(ID_SENSOR)
-- );

-- DADOS_PIEZO
-- DROP TABLE DADOS_PIEZO;
CREATE TABLE IF NOT EXISTS DADOS_PIEZO (
    ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
	  ID_TREM INT NOT NULL,
    ID_SENSOR_ORIGEM INT NOT NULL,
    ID_SENSOR_DESTINO INT NOT NULL,
    DATAHORA_INICIO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    DATAHORA_FIM DATETIME NOT NULL,
    PRESSAO DECIMAL(10,2) NOT NULL,
    VELOCIDADE DECIMAL(5,2) NOT NULL,
    -- HEADWAY INT NOT NULL,
    -- ATRASO INT NOT NULL,
    FOREIGN KEY (ID_SENSOR_ORIGEM) REFERENCES SENSOR(ID_SENSOR),
    FOREIGN KEY (ID_SENSOR_DESTINO) REFERENCES SENSOR(ID_SENSOR)
);

-- DADOS_DPS
CREATE TABLE IF NOT EXISTS DADOS_DPS (
    ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
    ID_SENSOR INT NOT NULL,
    DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `STATUS` VARCHAR(10) NOT NULL,
    CORRENTE DECIMAL(10,2) NOT NULL,
    TENSAO DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (ID_SENSOR) REFERENCES SENSOR(ID_SENSOR)
);

-- DADOS_OPTICO
CREATE TABLE IF NOT EXISTS DADOS_OPTICO (
    ID_LEITURA INT AUTO_INCREMENT PRIMARY KEY,
    ID_SENSOR INT NOT NULL,
    DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    BREAK_PAD_MM DOUBLE(6,2),
    SLA_STATUS VARCHAR(10),
    FOREIGN KEY (ID_SENSOR) REFERENCES SENSOR(ID_SENSOR)
);

-- Criar uma view para composição atual dos trens
CREATE OR REPLACE VIEW VW_COMPOSICAO_ATUAL AS
SELECT 
    T.ID_TREM,
    T.NUM_IDENTIFICACAO NUM_TREM,
    C.ID_CARRO,
    C.NUM_IDENTIFICACAO NUM_CARRO,
    C.MODELO
    -- CT.POSICAO_NO_TREM
FROM COMPOSICAO_TRENS CT
JOIN TREM T ON CT.ID_TREM = T.ID_TREM
JOIN CARRO C ON CT.ID_CARRO = C.ID_CARRO
WHERE CT.DATA_HORA_FIM IS NULL;

CREATE OR REPLACE VIEW VW_CIRCUITO AS
SELECT 
    CIRC.ID_CIRCUITO
    , CIRC.MODELO
    , CIRC.CATEGORIA
    , CIRC.PRIORIDADE
    , D.`STATUS`
    , CAR.NUM_IDENTIFICACAO
    , COMP.ID_TREM
FROM CIRCUITO CIRC
JOIN CARRO CAR ON CAR.ID_CARRO = CIRC.ID_CARRO
JOIN COMPOSICAO_TRENS COMP ON COMP.ID_CARRO = CAR.ID_CARRO AND COMP.DATA_HORA_FIM IS NULL
JOIN SENSOR S ON S.ID_CIRCUITO = CIRC.ID_CIRCUITO
JOIN DADOS_DPS D ON D.ID_SENSOR =  S.ID_SENSOR;

CREATE OR REPLACE VIEW VW_DISTANCIA_TRILHO AS
SELECT 
    S1.ID_SENSOR as SENSOR_1,
    S2.ID_SENSOR as SENSOR_2,
    ABS(T1.POSICAO_M - T2.POSICAO_M) AS DISTANCIA
FROM SENSOR S1
JOIN TRILHO T1 ON S1.ID_TRILHO = T1.ID_TRILHO
JOIN SENSOR S2 ON 1=1
JOIN TRILHO T2 ON S2.ID_TRILHO = T2.ID_TRILHO
WHERE S1.ID_SENSOR != S2.ID_SENSOR;

CREATE USER IF NOT EXISTS 'bypass_user'@'%' IDENTIFIED BY 'bypass1234';
GRANT ALL PRIVILEGES ON bypass_registry.* TO 'bypass_user'@'%';
FLUSH PRIVILEGES;